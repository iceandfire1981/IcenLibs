// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BleDevice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BleDevice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bean {

namespace {

const ::google::protobuf::Descriptor* BleDevice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BleDevice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_BleDevice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_BleDevice_2eproto() {
  protobuf_AddDesc_BleDevice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "BleDevice.proto");
  GOOGLE_CHECK(file != NULL);
  BleDevice_descriptor_ = file->message_type(0);
  static const int BleDevice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleDevice, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleDevice, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleDevice, desc_),
  };
  BleDevice_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BleDevice_descriptor_,
      BleDevice::internal_default_instance(),
      BleDevice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleDevice, _has_bits_),
      -1,
      -1,
      sizeof(BleDevice),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BleDevice, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_BleDevice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BleDevice_descriptor_, BleDevice::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_BleDevice_2eproto() {
  BleDevice_default_instance_.Shutdown();
  delete BleDevice_reflection_;
}

void protobuf_InitDefaults_BleDevice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  BleDevice_default_instance_.DefaultConstruct();
  BleDevice_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_BleDevice_2eproto_once_);
void protobuf_InitDefaults_BleDevice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_BleDevice_2eproto_once_,
                 &protobuf_InitDefaults_BleDevice_2eproto_impl);
}
void protobuf_AddDesc_BleDevice_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_BleDevice_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017BleDevice.proto\022\004bean\"3\n\tBleDevice\022\n\n\002"
    "id\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\022\014\n\004desc\030\003 \002(\tB\034\n\032"
    "com.icen.blelibrary.config", 106);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "BleDevice.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BleDevice_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BleDevice_2eproto_once_);
void protobuf_AddDesc_BleDevice_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_BleDevice_2eproto_once_,
                 &protobuf_AddDesc_BleDevice_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BleDevice_2eproto {
  StaticDescriptorInitializer_BleDevice_2eproto() {
    protobuf_AddDesc_BleDevice_2eproto();
  }
} static_descriptor_initializer_BleDevice_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BleDevice::kIdFieldNumber;
const int BleDevice::kNameFieldNumber;
const int BleDevice::kDescFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BleDevice::BleDevice()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_BleDevice_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bean.BleDevice)
}

void BleDevice::InitAsDefaultInstance() {
}

BleDevice::BleDevice(const BleDevice& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bean.BleDevice)
}

void BleDevice::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

BleDevice::~BleDevice() {
  // @@protoc_insertion_point(destructor:bean.BleDevice)
  SharedDtor();
}

void BleDevice::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BleDevice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BleDevice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BleDevice_descriptor_;
}

const BleDevice& BleDevice::default_instance() {
  protobuf_InitDefaults_BleDevice_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BleDevice> BleDevice_default_instance_;

BleDevice* BleDevice::New(::google::protobuf::Arena* arena) const {
  BleDevice* n = new BleDevice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BleDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:bean.BleDevice)
  if (_has_bits_[0 / 32] & 7u) {
    id_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_desc()) {
      desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BleDevice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bean.BleDevice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bean.BleDevice.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // required string desc = 3;
      case 3: {
        if (tag == 26) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bean.BleDevice.desc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bean.BleDevice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bean.BleDevice)
  return false;
#undef DO_
}

void BleDevice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bean.BleDevice)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bean.BleDevice.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bean.BleDevice.desc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->desc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bean.BleDevice)
}

::google::protobuf::uint8* BleDevice::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bean.BleDevice)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bean.BleDevice.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bean.BleDevice.desc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bean.BleDevice)
  return target;
}

size_t BleDevice::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:bean.BleDevice)
  size_t total_size = 0;

  if (has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_desc()) {
    // required string desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());
  }

  return total_size;
}
size_t BleDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bean.BleDevice)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required string name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string desc = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->desc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BleDevice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bean.BleDevice)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BleDevice* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BleDevice>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bean.BleDevice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bean.BleDevice)
    UnsafeMergeFrom(*source);
  }
}

void BleDevice::MergeFrom(const BleDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bean.BleDevice)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BleDevice::UnsafeMergeFrom(const BleDevice& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_desc()) {
      set_has_desc();
      desc_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BleDevice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bean.BleDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BleDevice::CopyFrom(const BleDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bean.BleDevice)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BleDevice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BleDevice::Swap(BleDevice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BleDevice::InternalSwap(BleDevice* other) {
  std::swap(id_, other->id_);
  name_.Swap(&other->name_);
  desc_.Swap(&other->desc_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BleDevice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BleDevice_descriptor_;
  metadata.reflection = BleDevice_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BleDevice

// required int32 id = 1;
bool BleDevice::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BleDevice::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BleDevice::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BleDevice::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 BleDevice::id() const {
  // @@protoc_insertion_point(field_get:bean.BleDevice.id)
  return id_;
}
void BleDevice::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:bean.BleDevice.id)
}

// required string name = 2;
bool BleDevice::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BleDevice::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BleDevice::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BleDevice::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& BleDevice::name() const {
  // @@protoc_insertion_point(field_get:bean.BleDevice.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BleDevice::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bean.BleDevice.name)
}
void BleDevice::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bean.BleDevice.name)
}
void BleDevice::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bean.BleDevice.name)
}
::std::string* BleDevice::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:bean.BleDevice.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BleDevice::release_name() {
  // @@protoc_insertion_point(field_release:bean.BleDevice.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BleDevice::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:bean.BleDevice.name)
}

// required string desc = 3;
bool BleDevice::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BleDevice::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
void BleDevice::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
void BleDevice::clear_desc() {
  desc_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_desc();
}
const ::std::string& BleDevice::desc() const {
  // @@protoc_insertion_point(field_get:bean.BleDevice.desc)
  return desc_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BleDevice::set_desc(const ::std::string& value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bean.BleDevice.desc)
}
void BleDevice::set_desc(const char* value) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bean.BleDevice.desc)
}
void BleDevice::set_desc(const char* value, size_t size) {
  set_has_desc();
  desc_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bean.BleDevice.desc)
}
::std::string* BleDevice::mutable_desc() {
  set_has_desc();
  // @@protoc_insertion_point(field_mutable:bean.BleDevice.desc)
  return desc_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BleDevice::release_desc() {
  // @@protoc_insertion_point(field_release:bean.BleDevice.desc)
  clear_has_desc();
  return desc_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BleDevice::set_allocated_desc(::std::string* desc) {
  if (desc != NULL) {
    set_has_desc();
  } else {
    clear_has_desc();
  }
  desc_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desc);
  // @@protoc_insertion_point(field_set_allocated:bean.BleDevice.desc)
}

inline const BleDevice* BleDevice::internal_default_instance() {
  return &BleDevice_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bean

// @@protoc_insertion_point(global_scope)
